import { Controller, Get, Post, Delete, Param, Body, UseGuards, Request } from '@nestjs/common';
import { AiConversationService, ChatMessage } from './ai-conversation.service';
import { JwtAuthGuard } from '../auth/guards/jwt-auth.guard';
import { AiService } from '../AI/ai.service';

@Controller('ai-conversations')
@UseGuards(JwtAuthGuard)
export class AiConversationController {
  constructor(
    private readonly aiConversationService: AiConversationService,
    private readonly aiService: AiService
  ) {
    console.log('üöÄ AiConversationController initialized');
  }

  @Get()
  async getUserConversations(@Request() req) {
    return this.aiConversationService.getUserConversations(req.user.userId);
  }

  @Get(':id')
  async getConversationById(@Param('id') id: string, @Request() req) {
    return this.aiConversationService.getConversationById(id, req.user.userId);
  }
  @Post('send-message')
  async sendMessage(
    @Request() req,
    @Body() body: { 
      conversationId?: string; 
      message: string; 
    }
  ) {
    console.log('üì® Received send-message request:', {
      userId: req.user?.userId,
      conversationId: body.conversationId,
      messageLength: body.message?.length
    });

    const { conversationId, message } = body;
    const userId = req.user.userId;

    if (!message || !message.trim()) {
      console.error('‚ùå Empty message received');
      throw new Error('Message cannot be empty');
    }

    try {
      console.log('üë§ Processing message for user:', userId);const userMessage: ChatMessage = {
        role: 'user',
        content: message,
        timestamp: new Date().toISOString(),
      };

      let conversation;

      if (conversationId) {
        // Add to existing conversation
        conversation = await this.aiConversationService.addMessageToConversation(
          conversationId,
          userId,
          userMessage
        );
      } else {
        // Create new conversation
        conversation = await this.aiConversationService.createConversation(userId, userMessage);
      }      // Prepare conversation context for AI
      const conversationContext = conversation.messages
        .map(msg => `${msg.role === 'user' ? 'Usuario' : 'Asistente'}: ${msg.content}`)
        .join('\n');
      
      const prompt = `Eres Xurp IA, un asistente inteligente especializado en gesti√≥n de proyectos, desarrollo de software y colaboraci√≥n en equipos. 

Conversaci√≥n anterior:
${conversationContext}

Responde de manera √∫til, profesional y concisa. Si no tienes informaci√≥n espec√≠fica, s√© honesto al respecto pero ofrece alternativas o sugerencias relacionadas.`;      // Call Hugging Face AI service with fallback to real AI APIs
      let aiResponseText;
      try {
        console.log('Attempting to call AI service with prompt length:', prompt.length);
        aiResponseText = await this.aiService.generateText(prompt);
        console.log('‚úÖ AI service succeeded, response length:', aiResponseText.length);
        
        // Check if response is too short and try alternative APIs
        if (aiResponseText.length < 15) {
          console.log('üîÑ Response too short, trying alternative AI APIs...');
          aiResponseText = await this.tryAlternativeAIAPIs(message, conversation.messages);
        }

      } catch (aiError) {
        console.warn('‚ùå AI service failed:', aiError.message);
        console.log('üîÑ Trying alternative AI APIs...');
        aiResponseText = await this.tryAlternativeAIAPIs(message, conversation.messages);
      }      // Safety check - only use local fallback if all APIs fail
      if (!aiResponseText || aiResponseText.trim() === '' || aiResponseText === 'Not Found') {
        console.warn('‚ö†Ô∏è All AI APIs failed, using minimal fallback');
        aiResponseText = `Hola, soy Xurp IA. En este momento estoy experimentando problemas de conectividad con los servicios de IA. 

Por favor, intenta de nuevo en unos momentos. Mientras tanto, puedo ayudarte con informaci√≥n espec√≠fica sobre:
‚Ä¢ Gesti√≥n de proyectos y metodolog√≠as √°giles
‚Ä¢ Desarrollo de software y tecnolog√≠as
‚Ä¢ Colaboraci√≥n en equipos

¬øEn qu√© √°rea espec√≠fica necesitas ayuda?`;
      }

      const aiMessage: ChatMessage = {
        role: 'assistant',
        content: aiResponseText,
        timestamp: new Date().toISOString(),
      };

      // Add AI response to conversation
      const updatedConversation = await this.aiConversationService.addMessageToConversation(
        conversation.id,
        userId,
        aiMessage
      );

      return {
        conversation: updatedConversation,
        reply: aiMessage.content,
      };

    } catch (error) {
      console.error('Error in AI conversation:', error);
      throw new Error('Error processing AI conversation');
    }
  }

  @Delete(':id')
  async deleteConversation(@Param('id') id: string, @Request() req) {
    await this.aiConversationService.deleteConversation(id, req.user.userId);
    return { message: 'Conversation deleted successfully' };
  }

  @Post(':id/rename')
  async renameConversation(
    @Param('id') id: string,
    @Request() req,
    @Body() body: { title: string }
  ) {
    return this.aiConversationService.updateConversationTitle(id, req.user.userId, body.title);
  }

  @Post('test-ai')
  async testAI(@Body() body: { message: string }) {
    try {
      console.log('üß™ Testing Hugging Face API with message:', body.message);
      const response = await this.aiService.generateText(body.message);
      return {
        success: true,
        response,
        message: 'Hugging Face API is working!'
      };
    } catch (error) {
      console.error('üö® Hugging Face API test failed:', error);
      return {
        success: false,
        error: error.message,
        message: 'Hugging Face API is not working'
      };
    }
  }

  @Get('health')
  async healthCheck() {
    console.log('üè• AI Conversation health check requested');
    return {
      status: 'ok',
      service: 'ai-conversations',
      timestamp: new Date().toISOString(),
      message: 'AI Conversation service is running'    };
  }

  private generateFallbackResponse(userMessage: string, conversationHistory: ChatMessage[]): string {
    const message = userMessage.toLowerCase();
    const isFirstMessage = conversationHistory.length <= 1;
    
    console.log('üîç Generating fallback response for:', userMessage);
    console.log('üîç Lowercase message:', message);

    // Specific question about whales
    if (message.includes('ballena') || message.includes('whale')) {
      if (message.includes('color')) {
        return `Las ballenas pueden tener diferentes colores dependiendo de la especie:

**Colores comunes de ballenas:**
‚Ä¢ **Ballena azul**: Gris azulado con manchas m√°s claras
‚Ä¢ **Ballena jorobada**: Negro en el dorso, blanco en el vientre
‚Ä¢ **Ballena gris**: Gris moteado con parches blancos
‚Ä¢ **Orca**: Negro con manchas blancas distintivas
‚Ä¢ **Ballena beluga**: Blanco puro (adultos)

En general, la mayor√≠a de ballenas tienen tonos de gris, desde gris claro hasta casi negro, con patrones √∫nicos de cada especie.`;
      }
      return `Las ballenas son mam√≠feros marinos fascinantes. Hay muchas especies diferentes, desde la ballena azul (el animal m√°s grande del planeta) hasta las orcas. ¬øTe interesa saber algo espec√≠fico sobre las ballenas?`;
    }

    // General knowledge questions
    if (message.includes('capital') && message.includes('colombia')) {
      return 'La capital de Colombia es **Bogot√°**. Es la ciudad m√°s grande del pa√≠s y el centro pol√≠tico, econ√≥mico y administrativo de Colombia.';
    }

    if (message.includes('capital') && (message.includes('espa√±a') || message.includes('spain'))) {
      return 'La capital de Espa√±a es **Madrid**. Es la ciudad m√°s poblada del pa√≠s y sede del gobierno espa√±ol.';
    }

    if (message.includes('capital') && (message.includes('francia') || message.includes('france'))) {
      return 'La capital de Francia es **Par√≠s**. Es conocida como la "Ciudad de la Luz" y es uno de los principales centros culturales del mundo.';
    }

    if (message.includes('capital') && (message.includes('italia') || message.includes('italy'))) {
      return 'La capital de Italia es **Roma**. Es conocida como la "Ciudad Eterna" y fue el centro del Imperio Romano.';
    }

    if (message.includes('capital') && (message.includes('alemania') || message.includes('germany'))) {
      return 'La capital de Alemania es **Berl√≠n**. Es la ciudad m√°s poblada del pa√≠s y un importante centro pol√≠tico y cultural europeo.';
    }

    // Basic math questions
    if (message.includes('cu√°nto es') || message.includes('cuanto es')) {
      if (message.includes('2+2') || message.includes('2 + 2')) {
        return '2 + 2 = **4**';
      }
      if (message.includes('5*5') || message.includes('5 * 5') || message.includes('5x5')) {
        return '5 √ó 5 = **25**';
      }
    }

    // Greeting responses
    if (isFirstMessage || message.includes('hola') || message.includes('hello') || message.includes('hi')) {
      return `¬°Hola! Soy Xurp IA, tu asistente inteligente.

Puedo ayudarte con:
‚Ä¢ **Preguntas generales** y conocimiento b√°sico
‚Ä¢ **Gesti√≥n de Proyectos**: Planificaci√≥n y metodolog√≠as
‚Ä¢ **Desarrollo de Software**: Buenas pr√°cticas y tecnolog√≠as  
‚Ä¢ **Colaboraci√≥n en Equipos**: Comunicaci√≥n y herramientas

¬øEn qu√© puedo ayudarte hoy?`;
    }

    // Project management topics
    if (message.includes('proyecto') || message.includes('planificar') || message.includes('gesti√≥n')) {
      return `Para la gesti√≥n de proyectos, te recomiendo considerar:

**Metodolog√≠as:**
‚Ä¢ Scrum para desarrollo √°gil
‚Ä¢ Kanban para flujo continuo
‚Ä¢ Waterfall para proyectos con requisitos fijos

**Herramientas esenciales:**
‚Ä¢ Planificaci√≥n: Gantt charts, roadmaps
‚Ä¢ Seguimiento: Dashboards, m√©tricas de progreso
‚Ä¢ Colaboraci√≥n: Daily standups, retrospectivas

¬øTe gustar√≠a que profundice en alg√∫n aspecto espec√≠fico de la gesti√≥n de proyectos?`;
    }

    // Development topics
    if (message.includes('desarrollo') || message.includes('c√≥digo') || message.includes('programar')) {
      return `En desarrollo de software, las mejores pr√°cticas incluyen:

**Arquitectura:**
‚Ä¢ Clean Code y principios SOLID
‚Ä¢ Arquitectura por capas o microservicios
‚Ä¢ Patrones de dise√±o apropiados

**Proceso de desarrollo:**
‚Ä¢ Control de versiones con Git
‚Ä¢ Testing automatizado (unit, integration, e2e)
‚Ä¢ CI/CD para despliegue continuo
‚Ä¢ Code reviews y pair programming

¬øHay alguna tecnolog√≠a espec√≠fica o problema de desarrollo que te interese?`;
    }

    // Team collaboration
    if (message.includes('equipo') || message.includes('colaborar') || message.includes('comunicaci√≥n')) {
      return `Para una colaboraci√≥n efectiva en equipos:

**Comunicaci√≥n:**
‚Ä¢ Reuniones regulares pero eficientes
‚Ä¢ Canales de comunicaci√≥n claros (Slack, Teams)
‚Ä¢ Documentaci√≥n accesible y actualizada

**Coordinaci√≥n:**
‚Ä¢ Roles y responsabilidades definidos
‚Ä¢ Procesos de escalaci√≥n claros
‚Ä¢ Herramientas de gesti√≥n compartidas

**Cultura de equipo:**
‚Ä¢ Feedback constructivo regular
‚Ä¢ Celebraci√≥n de logros
‚Ä¢ Aprendizaje continuo

¬øQu√© aspecto de la colaboraci√≥n te gustar√≠a mejorar en tu equipo?`;
    }    // Basic tech questions
    if (message.includes('que es') || message.includes('qu√© es')) {
      if (message.includes('api')) {
        return `**API (Application Programming Interface)** es un conjunto de reglas y protocolos que permite que diferentes aplicaciones se comuniquen entre s√≠:

**Tipos comunes:**
‚Ä¢ **REST API**: Usa HTTP con m√©todos GET, POST, PUT, DELETE
‚Ä¢ **GraphQL**: Permite consultas flexibles de datos
‚Ä¢ **WebSocket**: Para comunicaci√≥n en tiempo real

**Ejemplo de uso:**
Una app m√≥vil usa la API de Instagram para mostrar fotos, o una p√°gina web usa la API del clima para mostrar el pron√≥stico.

**Beneficios:**
‚Ä¢ Reutilizaci√≥n de funcionalidades
‚Ä¢ Separaci√≥n de responsabilidades  
‚Ä¢ Integraci√≥n entre sistemas diferentes
‚Ä¢ Escalabilidad

¬øTe interesa saber sobre alg√∫n tipo espec√≠fico de API?`;
      }
      
      if (message.includes('npm')) {
        return `**NPM (Node Package Manager)** es el gestor de paquetes predeterminado para Node.js:

**Funciones principales:**
‚Ä¢ **Instalar paquetes**: \`npm install express\`
‚Ä¢ **Gestionar dependencias**: package.json y package-lock.json
‚Ä¢ **Publicar paquetes**: Compartir c√≥digo con la comunidad
‚Ä¢ **Scripts**: Automatizar tareas de desarrollo

**Comandos esenciales:**
‚Ä¢ \`npm init\` - Crear nuevo proyecto
‚Ä¢ \`npm install\` - Instalar dependencias
‚Ä¢ \`npm run dev\` - Ejecutar script de desarrollo
‚Ä¢ \`npm publish\` - Publicar paquete

**package.json b√°sico:**
\`\`\`json
{
  "name": "mi-proyecto",
  "version": "1.0.0",
  "dependencies": {
    "express": "^4.18.0"
  }
}
\`\`\`

¬øNecesitas ayuda con alg√∫n comando espec√≠fico de NPM?`;
      }
    }
    if (message.includes('github') || message.includes('git hub') || (message.includes('git') && message.includes('funciona'))) {
      return `**GitHub** es una plataforma de desarrollo colaborativo que utiliza Git para control de versiones:

**Caracter√≠sticas principales:**
‚Ä¢ **Repositorios**: Almacenan tu c√≥digo y historial de cambios
‚Ä¢ **Branches**: Permiten trabajar en diferentes caracter√≠sticas sin afectar el c√≥digo principal
‚Ä¢ **Pull Requests**: Facilitan la revisi√≥n de c√≥digo antes de fusionar cambios
‚Ä¢ **Issues**: Sistema de seguimiento de bugs y caracter√≠sticas
‚Ä¢ **Actions**: Automatizaci√≥n de CI/CD y workflows

**Flujo de trabajo t√≠pico:**
1. Clonar repositorio (\`git clone\`)
2. Crear nueva rama (\`git checkout -b feature-branch\`)
3. Hacer cambios y commits (\`git commit -m "mensaje"\`)
4. Subir cambios (\`git push\`)
5. Crear Pull Request para revisi√≥n
6. Fusionar a rama principal tras aprobaci√≥n

**Ventajas para equipos:**
‚Ä¢ Colaboraci√≥n simult√°nea sin conflictos
‚Ä¢ Historial completo de cambios
‚Ä¢ Backup autom√°tico en la nube
‚Ä¢ Integraci√≥n con herramientas de desarrollo

¬øTe gustar√≠a saber algo espec√≠fico sobre Git o GitHub?`;
    }

    if (message.includes('react') || message.includes('reactjs')) {
      return `**React** es una biblioteca de JavaScript para construir interfaces de usuario:

**Conceptos clave:**
‚Ä¢ **Componentes**: Bloques reutilizables de UI
‚Ä¢ **JSX**: Sintaxis que combina JavaScript y HTML
‚Ä¢ **Props**: Datos que se pasan entre componentes
‚Ä¢ **State**: Estado interno de los componentes
‚Ä¢ **Hooks**: Funciones para manejar estado y efectos

**Ventajas:**
‚Ä¢ Virtual DOM para rendimiento optimizado
‚Ä¢ Reutilizaci√≥n de componentes
‚Ä¢ Ecosistema amplio de librer√≠as
‚Ä¢ Respaldado por Meta (Facebook)

**Estructura b√°sica:**
\`\`\`jsx
function MiComponente({ nombre }) {
  const [contador, setContador] = useState(0);
  
  return (
    <div>
      <h1>Hola {nombre}</h1>
      <button onClick={() => setContador(contador + 1)}>
        Clicks: {contador}
      </button>
    </div>
  );
}
\`\`\`

¬øQuieres saber sobre alg√∫n aspecto espec√≠fico de React?`;
    }

    if (message.includes('javascript') || message.includes('js')) {
      return `**JavaScript** es el lenguaje de programaci√≥n m√°s popular para desarrollo web:

**Usos principales:**
‚Ä¢ **Frontend**: Interactividad en p√°ginas web
‚Ä¢ **Backend**: Servidores con Node.js
‚Ä¢ **Mobile**: Apps con React Native
‚Ä¢ **Desktop**: Aplicaciones con Electron

**Conceptos fundamentales:**
‚Ä¢ Variables: \`let\`, \`const\`, \`var\`
‚Ä¢ Funciones: Tradicionales y arrow functions
‚Ä¢ Objetos y arrays
‚Ä¢ Async/await para operaciones as√≠ncronas
‚Ä¢ DOM manipulation

**Frameworks populares:**
‚Ä¢ **React**: UI components
‚Ä¢ **Vue**: Framework progresivo
‚Ä¢ **Angular**: Framework completo
‚Ä¢ **Node.js**: Backend JavaScript

**Ejemplo b√°sico:**
\`\`\`javascript
const usuarios = ['Ana', 'Carlos', 'Luis'];
usuarios.forEach(usuario => {
  console.log(\`Hola \${usuario}\`);
});
\`\`\`

¬øHay alg√∫n concepto espec√≠fico de JavaScript que te interese?`;
    }

    if (message.includes('typescript') || message.includes('ts')) {
      return `**TypeScript** es JavaScript con tipos est√°ticos desarrollado por Microsoft:

**Beneficios principales:**
‚Ä¢ **Type Safety**: Detecta errores en tiempo de compilaci√≥n
‚Ä¢ **IntelliSense**: Mejor autocompletado en editores
‚Ä¢ **Refactoring**: M√°s seguro y eficiente
‚Ä¢ **Documentaci√≥n**: Los tipos sirven como documentaci√≥n

**Caracter√≠sticas:**
‚Ä¢ Superset de JavaScript (todo JS es TS v√°lido)
‚Ä¢ Compilaci√≥n a JavaScript puro
‚Ä¢ Interfaces y tipos personalizados
‚Ä¢ Generics para c√≥digo reutilizable

**Ejemplo:**
\`\`\`typescript
interface Usuario {
  id: number;
  nombre: string;
  email: string;
}

function saludarUsuario(usuario: Usuario): string {
  return \`Hola \${usuario.nombre}\`;
}

const user: Usuario = {
  id: 1,
  nombre: "Ana",
  email: "ana@email.com"
};
\`\`\`

¬øTe gustar√≠a saber m√°s sobre tipos espec√≠ficos o configuraci√≥n de TypeScript?`;
    }

    if (message.includes('python')) {
      return `**Python** es un lenguaje de programaci√≥n vers√°til y f√°cil de aprender:

**Caracter√≠sticas:**
‚Ä¢ Sintaxis clara y legible
‚Ä¢ Tipado din√°mico
‚Ä¢ Multiparadigma (OOP, funcional, procedural)
‚Ä¢ Gran biblioteca est√°ndar

**Usos principales:**
‚Ä¢ **Data Science**: pandas, numpy, matplotlib
‚Ä¢ **Web Development**: Django, Flask, FastAPI
‚Ä¢ **AI/ML**: TensorFlow, PyTorch, scikit-learn
‚Ä¢ **Automation**: Scripts y automatizaci√≥n
‚Ä¢ **Backend APIs**: REST y GraphQL

**Ejemplo b√°sico:**
\`\`\`python
# Lista de n√∫meros
numeros = [1, 2, 3, 4, 5]

# List comprehension
cuadrados = [x**2 for x in numeros]

# Funci√≥n
def saludar(nombre):
    return f"Hola {nombre}!"

print(saludar("Mar√≠a"))
\`\`\`

¬øHay alg√∫n √°rea espec√≠fica de Python que te interese explorar?`;
    }    // Generic helpful response
    const fallbackResponse = `Entiendo tu pregunta: "${userMessage}"

Como asistente de Xurp, puedo ayudarte con diferentes tipos de consultas:

**Si necesitas informaci√≥n general:**
‚Ä¢ Preg√∫ntame sobre pa√≠ses, capitales, conceptos b√°sicos
‚Ä¢ C√°lculos matem√°ticos simples
‚Ä¢ Definiciones y explicaciones

**Para proyectos y desarrollo:**
‚Ä¢ Metodolog√≠as de gesti√≥n (Scrum, Kanban)
‚Ä¢ Buenas pr√°cticas de programaci√≥n
‚Ä¢ Herramientas de colaboraci√≥n

**Si tienes una pregunta espec√≠fica, intenta ser m√°s directo.** Por ejemplo:
‚Ä¢ "¬øCu√°l es la capital de [pa√≠s]?"
‚Ä¢ "¬øC√≥mo funciona [concepto]?"
‚Ä¢ "¬øQu√© es mejor para [situaci√≥n espec√≠fica]?"

¬øPuedes reformular tu pregunta de manera m√°s espec√≠fica?`;

    console.log('‚úÖ Returning generic fallback response, length:', fallbackResponse.length);
    return fallbackResponse;  }

  // M√©todo para probar APIs alternativas de IA cuando Hugging Face falla
  private async tryAlternativeAIAPIs(message: string, conversationHistory: any[]): Promise<string> {
    console.log('üîÑ Trying alternative AI APIs for message:', message);

    // Intentar con OpenRouter/OpenAI primero
    try {
      console.log('ü§ñ Trying OpenRouter API...');
      const openRouterResponse = await this.tryOpenAI(message);
      if (openRouterResponse && openRouterResponse.length > 15) {
        console.log('‚úÖ OpenRouter API succeeded');
        return openRouterResponse;
      }
    } catch (error) {
      console.warn('‚ùå OpenRouter API failed:', error.message);
    }

    // Intentar con Cohere
    try {
      console.log('ü§ñ Trying Cohere API...');
      const cohereResponse = await this.tryCohere(message);
      if (cohereResponse && cohereResponse.length > 15) {
        console.log('‚úÖ Cohere API succeeded');
        return cohereResponse;
      }
    } catch (error) {
      console.warn('‚ùå Cohere API failed:', error.message);
    }

    // Si todas las APIs fallan, usar el fallback inteligente del controlador
    console.warn('‚ö†Ô∏è All alternative AI APIs failed, using intelligent fallback');
    return this.generateFallbackResponse(message, conversationHistory);
  }

  // M√©todo mejorado para OpenRouter/OpenAI
  private async tryOpenAI(message: string): Promise<string> {
    const axios = require('axios');
    const apiKey = process.env.OPENROUTER_API_KEY;
    
    if (!apiKey) {
      throw new Error('OpenRouter API key not configured');
    }

    try {
      const response = await axios.post(
        'https://openrouter.ai/api/v1/chat/completions',
        {
          model: 'anthropic/claude-3-haiku:beta', // Modelo m√°s econ√≥mico y r√°pido
          messages: [
            {
              role: 'system',
              content: 'Eres Xurp IA, un asistente inteligente especializado en gesti√≥n de proyectos, desarrollo de software y colaboraci√≥n en equipos. Responde de manera √∫til, profesional y concisa en espa√±ol.'
            },
            {
              role: 'user',
              content: message
            }
          ],
          max_tokens: 300,
          temperature: 0.7
        },
        {
          headers: {
            'Authorization': `Bearer ${apiKey}`,
            'Content-Type': 'application/json',
            'HTTP-Referer': 'http://localhost:3001',
            'X-Title': 'Xurp IA Assistant'
          },
          timeout: 15000
        }
      );

      if (response.data.choices && response.data.choices[0]?.message?.content) {
        return response.data.choices[0].message.content.trim();
      } else {
        throw new Error('Invalid OpenRouter API response format');
      }
    } catch (error) {
      console.error('OpenRouter API error:', error.response?.data || error.message);
      throw error;
    }
  }

  // M√©todo para Cohere
  private async tryCohere(message: string): Promise<string> {
    const axios = require('axios');
    const apiKey = process.env.COHERE_API_KEY;
    
    if (!apiKey) {
      throw new Error('Cohere API key not configured');
    }

    try {
      const response = await axios.post(
        'https://api.cohere.ai/v1/generate',
        {
          model: 'command-light', // Modelo m√°s econ√≥mico
          prompt: `Como Xurp IA, un asistente especializado en gesti√≥n de proyectos y desarrollo de software, responde a: ${message}`,
          max_tokens: 300,
          temperature: 0.7,
          stop_sequences: ['\n\nHuman:', '\n\nUser:']
        },
        {
          headers: {
            'Authorization': `Bearer ${apiKey}`,
            'Content-Type': 'application/json'
          },
          timeout: 15000
        }
      );

      if (response.data.generations && response.data.generations[0]?.text) {
        return response.data.generations[0].text.trim();
      } else {
        throw new Error('Invalid Cohere API response format');
      }
    } catch (error) {
      console.error('Cohere API error:', error.response?.data || error.message);
      throw error;
    }
  }
}
