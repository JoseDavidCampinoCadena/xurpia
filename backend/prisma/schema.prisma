generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int              @id @default(autoincrement())
  email               String           @unique
  password            String
  name                String
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
  description         String?
  profileImage        String?
  cvUrl               String?
  gender              String?
  age                 Int?
  languages           String[]
  nationality         String?
  profession          String?
  projectsCount       Int              @default(0)
  membershipExpiresAt DateTime?
  membershipType      MembershipType   @default(FREE)
  aiTasks             AITask[]         @relation("AssignedAITasks")
  collaborations      Collaborator[]   @relation("UserCollaborations")
  Conversation        Conversation[]
  personalEvents      Event[]          @relation("UserPersonalEvents")
  sentMessages        Message[]        @relation("MessageFromUser")
  receivedMessages    Message[]        @relation("MessageToUser")
  notes               Note[]           @relation("UserNotes")
  notifications       Notification[]   @relation("UserNotifications")
  projects            Project[]        @relation("ProjectOwner")
  tasks               Task[]           @relation("AssignedTasks")
  evaluations         UserEvaluation[] @relation("UserEvaluations")
}

model Project {
  id                Int              @id @default(autoincrement())
  name              String
  description       String?
  ownerId           Int
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  lastConnection    DateTime?
  location          String?
  logo              String
  invitationCode    String?          @unique
  aiSuggestions     String?
  aiTimeline        String?
  completedAiTasks  Int              @default(0)
  estimatedDuration String?
  totalAiTasks      Int              @default(0)
  aiGeneratedTasks  AITask[]         @relation("ProjectAITasks")
  collaborators     Collaborator[]   @relation("ProjectCollaborators")
  events            Event[]
  owner             User             @relation("ProjectOwner", fields: [ownerId], references: [id])
  tasks             Task[]           @relation("ProjectTasks")
  evaluations       UserEvaluation[] @relation("ProjectEvaluations")
}

model Task {
  id          Int        @id @default(autoincrement())
  title       String
  description String?
  status      TaskStatus @default(PENDING)
  projectId   Int
  assigneeId  Int?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  assignee    User?      @relation("AssignedTasks", fields: [assigneeId], references: [id])
  project     Project    @relation("ProjectTasks", fields: [projectId], references: [id], onDelete: Cascade)
}

model Collaborator {
  id        Int      @id @default(autoincrement())
  userId    Int
  projectId Int
  role      String   @default("MEMBER")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  project   Project  @relation("ProjectCollaborators", fields: [projectId], references: [id], onDelete: Cascade)
  user      User     @relation("UserCollaborations", fields: [userId], references: [id])

  @@unique([userId, projectId])
}

model Event {
  id          Int      @id @default(autoincrement())
  title       String
  date        DateTime
  type        String
  description String?
  projectId   Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      Int?
  project     Project? @relation(fields: [projectId], references: [id])
  user        User?    @relation("UserPersonalEvents", fields: [userId], references: [id])
}

model Conversation {
  id        String   @id @default(uuid())
  userId    Int
  messages  Json
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model Note {
  id        Int      @id @default(autoincrement())
  title     String
  content   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  completed Boolean  @default(false)
  user      User     @relation("UserNotes", fields: [userId], references: [id])

  @@index([userId])
}

model Message {
  id         Int      @id @default(autoincrement())
  fromUserId Int
  toUserId   Int
  content    String
  createdAt  DateTime @default(now())
  fromUser   User     @relation("MessageFromUser", fields: [fromUserId], references: [id])
  toUser     User     @relation("MessageToUser", fields: [toUserId], references: [id])
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  type      String
  title     String
  message   String
  data      String?
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation("UserNotifications", fields: [userId], references: [id])
}

model UserEvaluation {
  id            Int      @id @default(autoincrement())
  userId        Int
  profession    String
  technology    String
  level         String
  score         Int
  questionsData String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  projectId     Int
  feedback      String
  project       Project  @relation("ProjectEvaluations", fields: [projectId], references: [id], onDelete: Cascade)
  user          User     @relation("UserEvaluations", fields: [userId], references: [id])

  @@unique([userId, projectId, technology])
}

model AITask {
  id             Int        @id @default(autoincrement())
  title          String
  description    String?
  skillLevel     String
  estimatedHours Int        @default(8)
  dayNumber      Int
  status         TaskStatus @default(PENDING)
  projectId      Int
  assigneeId     Int?
  completedAt    DateTime?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  assignee       User?      @relation("AssignedAITasks", fields: [assigneeId], references: [id])
  project        Project    @relation("ProjectAITasks", fields: [projectId], references: [id], onDelete: Cascade)
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}

enum MembershipType {
  FREE
  PRO
  ENTERPRISE
}
